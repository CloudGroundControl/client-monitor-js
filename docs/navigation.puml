@startuml
skinparam handwritten true
skinparam monochrome true
skinparam backgroundColor transparent

' hide the spot
hide circle

entity "PeerConnectionEntry" {
  *stats: RtcCodecStats
  *codecs(): CodecEntry[]
  *inboundRtps(): InboundRtpEntry[]
  *outboundRtps(): OutboundRtpEntry[]
  *remoteInboundRtps(): RemoteInboundRtpEntry[]
  *remoteOutboundRtps(): RemoteOutboundRtpEntry[]
  *mediaSources(): MediaSourceEntry[]
  *contributingSources(): ContributingSourceEntry[]
  *dataChannels(): DataChannelEntry[]
  *transceivers(): TransceiverEntry[]
  *senders(): SenderEntry[]
  *receivers(): ReceiverEntry[]
  *transports(): TransportEntry[]
  *sctpTransports(): SctpTransportEntry[]
  *iceCandidatePairs(): IceCandidatePairEntry[]
  *localCandidates(): LocalCandidateEntry[]
  *remoteCandidates(): RemoteCandidateEntry[]
  *certificates(): CertificateEntry[]
  *iceServers(): IceServerEntry[]
}

entity "CodecEntry" {
  *stats: RtcCodecStats
  *getPeerConnection(): PeerConnectionEntry
  *getTransport(): TransportEntry
}

entity "InboundRtpEntry" {
  *stats: RtcInboundRtpStreamStats
  *getPeerConnection(): PeerConnectionEntry
  *getTransport(): TransportEntry
  *getCodec(): CodecEntry
  *getReceiver(): ReceiverEntry
  *getRemoteOutboundRtp(): RemoteOutboundRtpEntry
}

entity "OutboundRtpEntry" {
  *stats: RtcInboundRtpStreamStats
  *getPeerConnection(): PeerConnectionEntry
  *getTransport(): TransportEntry
  *getCodec(): CodecEntry
  *getMediaSource(): MediaSourceEntry
  *getSender(): SenderEntry
  *getRemoteOutboundRtp(): RemoteInboundRtpEntry
}

entity "RemoteInboundRtpEntry" {
  *stats: RtcRemoteInboundRtpStreamStats
  *getPeerConnection(): PeerConnectionEntry
  *getTransport(): TransportEntry
  *getCodec(): CodecEntry
  *getOutboundRtp(): OutboundRtpEntry
}

entity "RemoteOutboundRtpEntry" {
  *stats: RtcRemoteOutboundRTPStreamStats
  *getPeerConnection(): PeerConnectionEntry
  *getTransport(): TransportEntry
  *getCodec(): CodecEntry
  *getInboundRtp(): InboundRtpEntry
}

entity "MediaSourceEntry" {
  *stats: RtcMediaSourceCompoundStats
  *getPeerConnection(): PeerConnectionEntry
}

entity "ContributingSourceEntry" {
  *stats: RtcRtpContributingSourceStats
  *getPeerConnection(): PeerConnectionEntry
  *getInboundRtp(): InboundRtpEntry
}

entity "DataChannelEntry" {
  *stats: RtcDataChannelStats
  *getPeerConnection(): PeerConnectionEntry
}

entity "TransceiverEntry" {
  *stats: RtcRtpTransceiverStats
  *getPeerConnection(): PeerConnectionEntry
  *getSender(): SenderEntry
  *getReceiver(): ReceiverEntry
}

entity "SenderEntry" {
  *stats: RtcSenderCompoundStats
  *getPeerConnection(): PeerConnectionEntry
  *getMediaSource(): MediaSourceEntry
}

entity "ReceiverEntry" {
  *stats: RtcReceiverCompoundStats
  *getPeerConnection(): PeerConnectionEntry
}

entity "TransportEntry" {
  *stats: RtcTransportStats
  *getPeerConnection(): PeerConnectionEntry
  *getSelectedIceCandidatePair(): IceCandidatePairEntry
  *getLocalCertificate(): CertificateEntry
  *getRemoteCertificate(): CertificateEntry
}

entity "SctpTransportEntry" {
  *stats: RtcSctpTransportStats
  *getPeerConnection(): PeerConnectionEntry
  *getTransport(): TransportEntry
}

entity "IceCandidatePairEntry" {
  *stats: RtcIceCandidatePairStats
  *getPeerConnection(): PeerConnectionEntry
  *getTransport(): TransportEntry
  *getLocalCandidate(): LocalCandidateEntry
  *getRemoteCandidate(): RemoteCandidateEntry
}

entity "LocalCandidateEntry" {
  *stats: RtcLocalCandidateStats
  *getPeerConnection(): PeerConnectionEntry
  *getTransport(): TransportEntry
}

entity "RemoteCandidateEntry" {
  *stats: RtcRemoteCandidateStats
  *getPeerConnection(): PeerConnectionEntry
  *getTransport(): TransportEntry
}

entity "CertificateEntry" {
  *stats: RtcCertificateStats
  *getPeerConnection(): PeerConnectionEntry
}

entity "IceServerEntry" {
  *stats: RtcIceServerStats
  *getPeerConnection(): PeerConnectionEntry
}

@enduml